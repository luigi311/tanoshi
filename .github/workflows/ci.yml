name: CI
permissions:
  contents: read

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - .gitignore
      - "*.md"
      - ".github/screenshots/**"
  push:
    paths-ignore:
      - .gitignore
      - "*.md"
      - ".github/screenshots/**"

env:
  LLVM_VERSION: 15
  UBUNTU_DEPS: libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev 
    nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev 
    zlib1g-dev libxml2-dev lsb-release wget software-properties-common 
    libwebkit2gtk-4.1-dev curl libgtk-3-dev libappindicator3-dev patchelf 
    librsvg2-dev libpango1.0-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev 
    libb2-dev

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          #- macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - run: mkdir crates/tanoshi-web/dist

      - name: Install deps (ubuntu/MacOS)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y $UBUNTU_DEPS
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install icu4c libarchive bzip2 lz4 zlib expat libiconv
          fi

      - uses: ilammy/setup-nasm@72793074d3c8cdda771dba85f6deafe00623038b

      - id: cache-vcpkg
        name: Cache vcpkg (windows)
        uses: actions/cache@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os }}-
          restore-keys: |
            vcpkg-${{ matrix.os }}-

      - name: Install deps (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@a7a1a882e2d06ebe05d5bb97c3e1f8c984ae96fc
        with:
          version: ${{ env.LLVM_VERSION }}

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
          key: "${{ matrix.os }}"
      
      - name: Run cargo test
        env:
          # Fix for macos
          PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
        run: |
          cargo test

  build-cli:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: ghcr.io/luigi311/tanoshi-builder:sha-381b86c
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0

      - name: Build tanoshi-cli
        shell: bash
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
        run: cargo build -p tanoshi-cli --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tanoshi-cli
          path: ${{ github.workspace }}/target/release/tanoshi-cli

      - name: Upload binaries to GitHub Releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/tanoshi-cli
          asset_name: tanoshi-cli
          tag: ${{ github.ref }}

  build-web:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luigi311/tanoshi-builder:sha-381b86c
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0

      - name: Build tanoshi-web
        run: cd crates/tanoshi-web && trunk build --release

      - name: Upload tanoshi-web
        uses: actions/upload-artifact@v4
        with:
          name: tanoshi-web
          path: crates/tanoshi-web/dist

  build-tauri:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    needs:
      - build-web
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
            type: linux
          - os: windows-latest
            arch: amd64
            type: windows
          - os: ubuntu-24.04-arm
            arch: aarch64
            type: linux

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: tanoshi-web
          path: crates/tanoshi-web/dist
      
      - uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
          key: "${{ matrix.type }}-${{ matrix.arch }}"

      - name: Install deps (ubuntu)
        if: ${{ matrix.type == 'linux' }}
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y $UBUNTU_DEPS

      - name: Install deps (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install icu4c libarchive bzip2 lz4 zlib expat libiconv

      - uses: ilammy/setup-nasm@72793074d3c8cdda771dba85f6deafe00623038b

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@a7a1a882e2d06ebe05d5bb97c3e1f8c984ae96fc
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Cache vcpkg
        uses: actions/cache@v4
        if: ${{ matrix.type == 'windows' }}
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os }}-
          restore-keys: |
            vcpkg-${{ matrix.os }}-

      - name: Install deps (windows)
        if: ${{ matrix.type == 'windows' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md

      - name: Install Binstall
        uses: cargo-bins/cargo-binstall@20aa316bab4942180bbbabe93237858e8d77f1ed
      
      - name: Install tauri-cli
        run: cargo binstall tauri-cli@2 --no-confirm --locked

      - name: Build tauri
        shell: bash
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
        run: |
          cd crates/tanoshi-tauri
          cargo tauri build

      - name: Move files (linux/macOS)
        if: ${{ matrix.type == 'linux' ||  matrix.type == 'macos' }}
        run: |
          mkdir -p builds
          find target/ -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.dmg" \) -print0 |
          while IFS= read -r -d '' file; do
              mv "$file" ${{ github.workspace }}/builds/
          done
          mv target/*/tanoshi-app ${{ github.workspace }}/builds/

      - name: Move files (windows)
        if: ${{ matrix.type == 'windows' }}
        run: |
          mkdir -p builds
          mv target/*/bundle/msi/*.msi ${{ github.workspace }}/builds/
          mv target/*/tanoshi-app ${{ github.workspace }}/builds/

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: tanoshi-app-${{ matrix.type }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/builds/

      - name: Upload binaries to GitHub Releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/builds/*
          tag: ${{ github.ref }}
          file_glob: true
          overwrite: true

  build-flatpak:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    needs: build-tauri
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-47
      options: --privileged
    strategy:
      matrix:
        include:
          - arch: x86_64
            name: amd64
            os: ubuntu-24.04
          - arch: aarch64
            name: aarch64
            os: ubuntu-24.04-arm
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download files
        uses: actions/download-artifact@v4
        with:
          name: tanoshi-app-linux-${{ matrix.name }}
          path: target/release/

      - uses: flatpak/flatpak-github-actions/flatpak-builder@10a3c29f0162516f0f68006be14c92f34bd4fa6c
        with:
          bundle: tanoshi.${{ matrix.arch }}.flatpak
          manifest-path: org.luigi311.tanoshi.yml
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}
          upload-artifact: false

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: tanoshi.${{ matrix.arch }}.flatpak
          path: tanoshi.${{ matrix.arch }}.flatpak

      - name: Upload binaries to GitHub Releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tanoshi.${{ matrix.arch }}.flatpak
          tag: ${{ github.ref }}
          file_glob: true
          overwrite: true

  build-tanoshi:
    runs-on: ${{ matrix.os }}
    needs:
      - build-web
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
            type: linux
          - os: ubuntu-24.04-arm
            arch: aarch64
            type: linux
    steps:      
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: tanoshi-web
          path: crates/tanoshi-web/dist
      
      - uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
          key: "${{ matrix.type }}-${{ matrix.arch }}"

      - name: Install deps
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y $UBUNTU_DEPS

      - uses: ilammy/setup-nasm@72793074d3c8cdda771dba85f6deafe00623038b

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@a7a1a882e2d06ebe05d5bb97c3e1f8c984ae96fc
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Build tanoshi
        shell: bash
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
        run: cargo build -p tanoshi --release

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: tanoshi-${{ matrix.arch }}
          path: ${{ github.workspace }}/target/release/tanoshi

  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs:
      - build-tanoshi
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download dist (AMD64)
        uses: actions/download-artifact@v4
        with:
          name: tanoshi-amd64
          path: linux/amd64
      
      - name: Download dist (AARCH64)
        uses: actions/download-artifact@v4
        with:
          name: tanoshi-aarch64
          path: linux/arm64

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/tanoshi,enable=${{ secrets.DOCKER_USERNAME != '' }}
            # Do not push to ghcr.io on PRs due to permission issues, only push if the owner is luigi311 so it doesnt fail on forks
            ghcr.io/${{ github.repository }},enable=${{ github.event_name != 'pull_request' && github.repository_owner == 'luigi311'}}
          flavor: latest=false
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{ version }}
            type=semver,pattern={{ major }}.{{ minor }}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        if: "${{ env.DOCKER_USERNAME != '' }}"
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        if: "${{ steps.docker_meta.outcome == 'success' }}"
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        id: build
        if: "${{ steps.docker_meta.outputs.tags == '' }}"
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: Dockerfile.CI
          platforms: linux/amd64,linux/arm64
          push: false
          tags: tanoshi:action

      - name: Build Push
        id: build_push
        if: "${{ steps.docker_meta.outputs.tags != '' }}"
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: Dockerfile.CI
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      # Echo digest so users can validate their image
      - name: Image digest
        if: "${{ steps.docker_meta.outcome == 'success' }}"
        env: 
          DIGEST: ${{ steps.build_push.outputs.digest }}
        run: echo "$DIGEST"
